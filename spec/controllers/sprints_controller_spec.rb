require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SprintsController do
  before do
    @project = Project.new
    @project.name = "test"
    @project.description = "test"
    @project.save!
  end

  # This should return the minimal set of attributes required to create a valid
  # Sprint. As you add validations to Sprint, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {project: @project}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SprintsController. Be sure to keep this updated too.
  def valid_session
    {user_id: 1}
  end


  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested sprint" do
        sprint = Sprint.create! valid_attributes
        # Assuming there are no other sprints in the database, this
        # specifies that the Sprint created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Sprint.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:project_id => sprint.project.to_param, id: sprint.to_param, :sprint => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested sprint as @sprint" do
        sprint = Sprint.create! valid_attributes
        put :update, {:id => sprint.project.to_param, :sprint => valid_attributes}, valid_session
        assigns(:sprint).should eq(sprint)
      end

      it "redirects to the sprint" do
        sprint = Sprint.create! valid_attributes
        put :update, {:id => sprint.project.to_param, :sprint => valid_attributes}, valid_session
        response.should redirect_to(sprint)
      end
    end

    describe "with invalid params" do
      it "assigns the sprint as @sprint" do
        sprint = Sprint.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Sprint.any_instance.stub(:save).and_return(false)
        put :update, {:id => sprint.project.to_param, :sprint => {}}, valid_session
        assigns(:sprint).should eq(sprint)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested sprint" do
      sprint = Sprint.create! valid_attributes
      expect {
        delete :destroy, {:id => sprint.project.to_param}, valid_session
      }.to change(Sprint, :count).by(-1)
    end
  end

end
